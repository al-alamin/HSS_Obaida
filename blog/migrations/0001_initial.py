# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-05 15:28
from __future__ import unicode_literals

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='BlogTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('post_type', models.CharField(choices=[('blog', 'blog'), ('news', 'news'), ('other', 'other')], max_length=30)),
                ('text', ckeditor.fields.RichTextField(max_length=50000)),
                ('featured_img', models.ImageField(default='images/blog/img22.jpg', help_text='This image will be used in single blog page', upload_to='images/blog/')),
                ('thumbnail', models.ImageField(default='images/blog/img22.jpg', help_text='This image will be used in blog page or as a thumbnail in sidebar', upload_to='images/blog/')),
                ('date_created', models.DateField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('category', models.ManyToManyField(to='blog.BlogCategory')),
                ('tag', models.ManyToManyField(to='blog.BlogTag')),
            ],
        ),
    ]
